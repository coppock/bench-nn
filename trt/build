#!/usr/bin/env python

import tensorrt as trt

import argparse

from logger import Logger
from shape import Shape

parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output')
parser.add_argument('-s', '--shape', action='append', type=Shape)
parser.add_argument('model')
args = parser.parse_args()

logger = Logger()
builder = trt.Builder(logger)
network = builder.create_network()
parser = trt.OnnxParser(network, logger)
with open(args.model, 'rb') as f:
    assert parser.parse(f.read())
config = builder.create_builder_config()
if args.shape:
    profile = builder.create_optimization_profile()
    for shape in args.shape:
        profile.set_shape(shape.name, shape.min_shape, shape.opt_shape,
                          shape.max_shape)
    config.add_optimization_profile(profile)
engine = builder.build_serialized_network(network, config)
with open(args.output, 'wb') as f: f.write(engine)
