#!/usr/bin/env python

import tensorrt as trt

import argparse

from logger import Logger

parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output')
parser.add_argument('-n', '--max-batch-size', default=16, type=int)
parser.add_argument('model')
args = parser.parse_args()

logger = Logger()
builder = trt.Builder(logger)
network = builder.create_network()
parser = trt.OnnxParser(network, logger)
with open(args.model, 'rb') as f: assert parser.parse(f.read())
config = builder.create_builder_config()
if any(any(x < 0 for x in network.get_input(i).shape)
       for i in range(network.num_inputs)):
    profile = builder.create_optimization_profile()
    for i in range(network.num_inputs):
        input = network.get_input(i)
        shape = input.shape
        assert all(x >= 0 for x in shape[1:])
        if shape[0] < 0:
            min_shape = [1] + list(shape[1:])
            profile.set_shape(input.name, min_shape, min_shape,
                              [args.max_batch_size] + list(shape[1:]))
    config.add_optimization_profile(profile)
engine = builder.build_serialized_network(network, config)
with open(args.output, 'wb') as f: f.write(engine)
