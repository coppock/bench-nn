#!/usr/bin/env python

import tensorrt as trt

import argparse
import logging
import shlex
import sys

# This is all because trt.Logger _actually_ writes to stdout!
class Logger(trt.ILogger):
    _levels = [
        logging.CRITICAL,
        logging.ERROR,
        logging.WARNING,
        logging.INFO,
        logging.DEBUG,
    ]

    def __init__(self, severity=trt.ILogger.WARNING):
        trt.ILogger.__init__(self)
        logging.basicConfig(level=self._levels[severity.value])

    def log(self, severity, msg):
        logging.log(self._levels[severity.value], msg)

class Shape:
    def __init__(self, s):
        parser = shlex.shlex(s, posix=True)
        parser.whitespace = ':'
        parser.whitespace_split = True
        self.name, shapes = list(parser)

        shapes = [[int(i) for i in shape.split('x')]
                  for shape in shapes.split(',')]
        try: self.min_shape, self.opt_shape, self.max_shape = shapes
        except ValueError:
            self.opt_shape, = shapes
            self.min_shape, self.max_shape = 2*[self.opt_shape]

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--shape', action='append', type=Shape)
args = parser.parse_args()

logger = Logger()
builder = trt.Builder(logger)
network = builder.create_network()
parser = trt.OnnxParser(network, logger)
assert parser.parse(sys.stdin.buffer.read())
config = builder.create_builder_config()
if args.shape:
    profile = builder.create_optimization_profile()
    for shape in args.shape:
        profile.set_shape(shape.name, shape.min_shape, shape.opt_shape,
                          shape.max_shape)
    config.add_optimization_profile(profile)
serialized_engine = builder.build_serialized_network(network, config)
sys.stdout.buffer.write(serialized_engine)
